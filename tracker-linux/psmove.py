# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_psmove', [dirname(__file__)])
        except ImportError:
            import _psmove
            return _psmove
        if fp is not None:
            try:
                _mod = imp.load_module('_psmove', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _psmove = swig_import_helper()
    del swig_import_helper
else:
    import _psmove
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def cdata(ptr, nelements=1):
    return _psmove.cdata(ptr, nelements)
cdata = _psmove.cdata

def memmove(data, indata):
    return _psmove.memmove(data, indata)
memmove = _psmove.memmove

_psmove.Conn_Bluetooth_swigconstant(_psmove)
Conn_Bluetooth = _psmove.Conn_Bluetooth

_psmove.Conn_USB_swigconstant(_psmove)
Conn_USB = _psmove.Conn_USB

_psmove.Conn_Unknown_swigconstant(_psmove)
Conn_Unknown = _psmove.Conn_Unknown

_psmove.Btn_TRIANGLE_swigconstant(_psmove)
Btn_TRIANGLE = _psmove.Btn_TRIANGLE

_psmove.Btn_CIRCLE_swigconstant(_psmove)
Btn_CIRCLE = _psmove.Btn_CIRCLE

_psmove.Btn_CROSS_swigconstant(_psmove)
Btn_CROSS = _psmove.Btn_CROSS

_psmove.Btn_SQUARE_swigconstant(_psmove)
Btn_SQUARE = _psmove.Btn_SQUARE

_psmove.Btn_SELECT_swigconstant(_psmove)
Btn_SELECT = _psmove.Btn_SELECT

_psmove.Btn_START_swigconstant(_psmove)
Btn_START = _psmove.Btn_START

_psmove.Btn_PS_swigconstant(_psmove)
Btn_PS = _psmove.Btn_PS

_psmove.Btn_MOVE_swigconstant(_psmove)
Btn_MOVE = _psmove.Btn_MOVE

_psmove.Btn_T_swigconstant(_psmove)
Btn_T = _psmove.Btn_T

_psmove.Frame_FirstHalf_swigconstant(_psmove)
Frame_FirstHalf = _psmove.Frame_FirstHalf

_psmove.Frame_SecondHalf_swigconstant(_psmove)
Frame_SecondHalf = _psmove.Frame_SecondHalf

_psmove.Batt_MIN_swigconstant(_psmove)
Batt_MIN = _psmove.Batt_MIN

_psmove.Batt_20Percent_swigconstant(_psmove)
Batt_20Percent = _psmove.Batt_20Percent

_psmove.Batt_40Percent_swigconstant(_psmove)
Batt_40Percent = _psmove.Batt_40Percent

_psmove.Batt_60Percent_swigconstant(_psmove)
Batt_60Percent = _psmove.Batt_60Percent

_psmove.Batt_80Percent_swigconstant(_psmove)
Batt_80Percent = _psmove.Batt_80Percent

_psmove.Batt_MAX_swigconstant(_psmove)
Batt_MAX = _psmove.Batt_MAX

_psmove.Batt_CHARGING_swigconstant(_psmove)
Batt_CHARGING = _psmove.Batt_CHARGING

_psmove.Batt_CHARGING_DONE_swigconstant(_psmove)
Batt_CHARGING_DONE = _psmove.Batt_CHARGING_DONE

_psmove.Update_Failed_swigconstant(_psmove)
Update_Failed = _psmove.Update_Failed

_psmove.Update_Success_swigconstant(_psmove)
Update_Success = _psmove.Update_Success

_psmove.Update_Ignored_swigconstant(_psmove)
Update_Ignored = _psmove.Update_Ignored

_psmove.PSMove_False_swigconstant(_psmove)
PSMove_False = _psmove.PSMove_False

_psmove.PSMove_True_swigconstant(_psmove)
PSMove_True = _psmove.PSMove_True

_psmove.PSMove_LocalAndRemote_swigconstant(_psmove)
PSMove_LocalAndRemote = _psmove.PSMove_LocalAndRemote

_psmove.PSMove_OnlyLocal_swigconstant(_psmove)
PSMove_OnlyLocal = _psmove.PSMove_OnlyLocal

_psmove.PSMove_OnlyRemote_swigconstant(_psmove)
PSMove_OnlyRemote = _psmove.PSMove_OnlyRemote

_psmove.OrientationFusion_None_swigconstant(_psmove)
OrientationFusion_None = _psmove.OrientationFusion_None

_psmove.OrientationFusion_MadgwickIMU_swigconstant(_psmove)
OrientationFusion_MadgwickIMU = _psmove.OrientationFusion_MadgwickIMU

_psmove.OrientationFusion_MadgwickMARG_swigconstant(_psmove)
OrientationFusion_MadgwickMARG = _psmove.OrientationFusion_MadgwickMARG

_psmove.OrientationFusion_ComplementaryMARG_swigconstant(_psmove)
OrientationFusion_ComplementaryMARG = _psmove.OrientationFusion_ComplementaryMARG

_psmove.CalibrationPose_Upright_swigconstant(_psmove)
CalibrationPose_Upright = _psmove.CalibrationPose_Upright

_psmove.CalibrationPose_LyingFlat_swigconstant(_psmove)
CalibrationPose_LyingFlat = _psmove.CalibrationPose_LyingFlat

_psmove.SensorDataBasis_Native_swigconstant(_psmove)
SensorDataBasis_Native = _psmove.SensorDataBasis_Native

_psmove.SensorDataBasis_OpenGL_swigconstant(_psmove)
SensorDataBasis_OpenGL = _psmove.SensorDataBasis_OpenGL

_psmove.PSMOVE_EXT_DATA_BUF_SIZE_swigconstant(_psmove)
PSMOVE_EXT_DATA_BUF_SIZE = _psmove.PSMOVE_EXT_DATA_BUF_SIZE
class PSMove_Ext_Device_Info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMove_Ext_Device_Info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMove_Ext_Device_Info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dev_id"] = _psmove.PSMove_Ext_Device_Info_dev_id_set
    __swig_getmethods__["dev_id"] = _psmove.PSMove_Ext_Device_Info_dev_id_get
    if _newclass:
        dev_id = _swig_property(_psmove.PSMove_Ext_Device_Info_dev_id_get, _psmove.PSMove_Ext_Device_Info_dev_id_set)
    __swig_setmethods__["dev_info"] = _psmove.PSMove_Ext_Device_Info_dev_info_set
    __swig_getmethods__["dev_info"] = _psmove.PSMove_Ext_Device_Info_dev_info_get
    if _newclass:
        dev_info = _swig_property(_psmove.PSMove_Ext_Device_Info_dev_info_get, _psmove.PSMove_Ext_Device_Info_dev_info_set)

    def __init__(self):
        this = _psmove.new_PSMove_Ext_Device_Info()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _psmove.delete_PSMove_Ext_Device_Info
    __del__ = lambda self: None
PSMove_Ext_Device_Info_swigregister = _psmove.PSMove_Ext_Device_Info_swigregister
PSMove_Ext_Device_Info_swigregister(PSMove_Ext_Device_Info)

class _PSMove_3AxisVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _PSMove_3AxisVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _PSMove_3AxisVector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _psmove._PSMove_3AxisVector_x_set
    __swig_getmethods__["x"] = _psmove._PSMove_3AxisVector_x_get
    if _newclass:
        x = _swig_property(_psmove._PSMove_3AxisVector_x_get, _psmove._PSMove_3AxisVector_x_set)
    __swig_setmethods__["y"] = _psmove._PSMove_3AxisVector_y_set
    __swig_getmethods__["y"] = _psmove._PSMove_3AxisVector_y_get
    if _newclass:
        y = _swig_property(_psmove._PSMove_3AxisVector_y_get, _psmove._PSMove_3AxisVector_y_set)
    __swig_setmethods__["z"] = _psmove._PSMove_3AxisVector_z_set
    __swig_getmethods__["z"] = _psmove._PSMove_3AxisVector_z_get
    if _newclass:
        z = _swig_property(_psmove._PSMove_3AxisVector_z_get, _psmove._PSMove_3AxisVector_z_set)
    __swig_setmethods__["v"] = _psmove._PSMove_3AxisVector_v_set
    __swig_getmethods__["v"] = _psmove._PSMove_3AxisVector_v_get
    if _newclass:
        v = _swig_property(_psmove._PSMove_3AxisVector_v_get, _psmove._PSMove_3AxisVector_v_set)

    def __init__(self):
        this = _psmove.new__PSMove_3AxisVector()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _psmove.delete__PSMove_3AxisVector
    __del__ = lambda self: None
_PSMove_3AxisVector_swigregister = _psmove._PSMove_3AxisVector_swigregister
_PSMove_3AxisVector_swigregister(_PSMove_3AxisVector)

class _PSMove_3AxisTransform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _PSMove_3AxisTransform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _PSMove_3AxisTransform, name)
    __repr__ = _swig_repr
    __swig_setmethods__["row0"] = _psmove._PSMove_3AxisTransform_row0_set
    __swig_getmethods__["row0"] = _psmove._PSMove_3AxisTransform_row0_get
    if _newclass:
        row0 = _swig_property(_psmove._PSMove_3AxisTransform_row0_get, _psmove._PSMove_3AxisTransform_row0_set)
    __swig_setmethods__["row1"] = _psmove._PSMove_3AxisTransform_row1_set
    __swig_getmethods__["row1"] = _psmove._PSMove_3AxisTransform_row1_get
    if _newclass:
        row1 = _swig_property(_psmove._PSMove_3AxisTransform_row1_get, _psmove._PSMove_3AxisTransform_row1_set)
    __swig_setmethods__["row2"] = _psmove._PSMove_3AxisTransform_row2_set
    __swig_getmethods__["row2"] = _psmove._PSMove_3AxisTransform_row2_get
    if _newclass:
        row2 = _swig_property(_psmove._PSMove_3AxisTransform_row2_get, _psmove._PSMove_3AxisTransform_row2_set)
    __swig_setmethods__["m"] = _psmove._PSMove_3AxisTransform_m_set
    __swig_getmethods__["m"] = _psmove._PSMove_3AxisTransform_m_get
    if _newclass:
        m = _swig_property(_psmove._PSMove_3AxisTransform_m_get, _psmove._PSMove_3AxisTransform_m_set)

    def __init__(self):
        this = _psmove.new__PSMove_3AxisTransform()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _psmove.delete__PSMove_3AxisTransform
    __del__ = lambda self: None
_PSMove_3AxisTransform_swigregister = _psmove._PSMove_3AxisTransform_swigregister
_PSMove_3AxisTransform_swigregister(_PSMove_3AxisTransform)


_psmove.PSMOVE_CURRENT_VERSION_swigconstant(_psmove)
PSMOVE_CURRENT_VERSION = _psmove.PSMOVE_CURRENT_VERSION

def psmove_init(version):
    return _psmove.psmove_init(version)
psmove_init = _psmove.psmove_init

def psmove_set_remote_config(config):
    return _psmove.psmove_set_remote_config(config)
psmove_set_remote_config = _psmove.psmove_set_remote_config

def psmove_count_connected():
    return _psmove.psmove_count_connected()
psmove_count_connected = _psmove.psmove_count_connected

def psmove_connect():
    return _psmove.psmove_connect()
psmove_connect = _psmove.psmove_connect

def psmove_connect_by_id(id):
    return _psmove.psmove_connect_by_id(id)
psmove_connect_by_id = _psmove.psmove_connect_by_id

def psmove_connection_type(move):
    return _psmove.psmove_connection_type(move)
psmove_connection_type = _psmove.psmove_connection_type

def psmove_is_remote(move):
    return _psmove.psmove_is_remote(move)
psmove_is_remote = _psmove.psmove_is_remote

def psmove_get_serial(move):
    return _psmove.psmove_get_serial(move)
psmove_get_serial = _psmove.psmove_get_serial

def psmove_pair(move):
    return _psmove.psmove_pair(move)
psmove_pair = _psmove.psmove_pair

def psmove_host_pair_custom(addr):
    return _psmove.psmove_host_pair_custom(addr)
psmove_host_pair_custom = _psmove.psmove_host_pair_custom

def psmove_pair_custom(move, new_host_string):
    return _psmove.psmove_pair_custom(move, new_host_string)
psmove_pair_custom = _psmove.psmove_pair_custom

def psmove_set_rate_limiting(move, enabled):
    return _psmove.psmove_set_rate_limiting(move, enabled)
psmove_set_rate_limiting = _psmove.psmove_set_rate_limiting

def psmove_set_leds(move, r, g, b):
    return _psmove.psmove_set_leds(move, r, g, b)
psmove_set_leds = _psmove.psmove_set_leds

def psmove_set_led_pwm_frequency(move, freq):
    return _psmove.psmove_set_led_pwm_frequency(move, freq)
psmove_set_led_pwm_frequency = _psmove.psmove_set_led_pwm_frequency

def psmove_set_rumble(move, rumble):
    return _psmove.psmove_set_rumble(move, rumble)
psmove_set_rumble = _psmove.psmove_set_rumble

def psmove_update_leds(move):
    return _psmove.psmove_update_leds(move)
psmove_update_leds = _psmove.psmove_update_leds

def psmove_poll(move):
    return _psmove.psmove_poll(move)
psmove_poll = _psmove.psmove_poll

def psmove_get_ext_data(move, data):
    return _psmove.psmove_get_ext_data(move, data)
psmove_get_ext_data = _psmove.psmove_get_ext_data

def psmove_send_ext_data(move, data, length):
    return _psmove.psmove_send_ext_data(move, data, length)
psmove_send_ext_data = _psmove.psmove_send_ext_data

def psmove_get_buttons(move):
    return _psmove.psmove_get_buttons(move)
psmove_get_buttons = _psmove.psmove_get_buttons

def psmove_get_button_events(move, pressed, released):
    return _psmove.psmove_get_button_events(move, pressed, released)
psmove_get_button_events = _psmove.psmove_get_button_events

def psmove_is_ext_connected(move):
    return _psmove.psmove_is_ext_connected(move)
psmove_is_ext_connected = _psmove.psmove_is_ext_connected

def psmove_get_ext_device_info(move, info):
    return _psmove.psmove_get_ext_device_info(move, info)
psmove_get_ext_device_info = _psmove.psmove_get_ext_device_info

def psmove_get_battery(move):
    return _psmove.psmove_get_battery(move)
psmove_get_battery = _psmove.psmove_get_battery

def psmove_get_temperature(move):
    return _psmove.psmove_get_temperature(move)
psmove_get_temperature = _psmove.psmove_get_temperature

def psmove_get_temperature_in_celsius(move):
    return _psmove.psmove_get_temperature_in_celsius(move)
psmove_get_temperature_in_celsius = _psmove.psmove_get_temperature_in_celsius

def psmove_get_trigger(move):
    return _psmove.psmove_get_trigger(move)
psmove_get_trigger = _psmove.psmove_get_trigger

def psmove_get_accelerometer(move, ax, ay, az):
    return _psmove.psmove_get_accelerometer(move, ax, ay, az)
psmove_get_accelerometer = _psmove.psmove_get_accelerometer

def psmove_get_gyroscope(move, gx, gy, gz):
    return _psmove.psmove_get_gyroscope(move, gx, gy, gz)
psmove_get_gyroscope = _psmove.psmove_get_gyroscope

def psmove_get_magnetometer(move, mx, my, mz):
    return _psmove.psmove_get_magnetometer(move, mx, my, mz)
psmove_get_magnetometer = _psmove.psmove_get_magnetometer

def psmove_get_accelerometer_frame(move, frame, ax, ay, az):
    return _psmove.psmove_get_accelerometer_frame(move, frame, ax, ay, az)
psmove_get_accelerometer_frame = _psmove.psmove_get_accelerometer_frame

def psmove_get_gyroscope_frame(move, frame, gx, gy, gz):
    return _psmove.psmove_get_gyroscope_frame(move, frame, gx, gy, gz)
psmove_get_gyroscope_frame = _psmove.psmove_get_gyroscope_frame

def psmove_get_magnetometer_vector(move, mx, my, mz):
    return _psmove.psmove_get_magnetometer_vector(move, mx, my, mz)
psmove_get_magnetometer_vector = _psmove.psmove_get_magnetometer_vector

def psmove_get_magnetometer_3axisvector(move, out_m):
    return _psmove.psmove_get_magnetometer_3axisvector(move, out_m)
psmove_get_magnetometer_3axisvector = _psmove.psmove_get_magnetometer_3axisvector

def psmove_reset_magnetometer_calibration(move):
    return _psmove.psmove_reset_magnetometer_calibration(move)
psmove_reset_magnetometer_calibration = _psmove.psmove_reset_magnetometer_calibration

def psmove_save_magnetometer_calibration(move):
    return _psmove.psmove_save_magnetometer_calibration(move)
psmove_save_magnetometer_calibration = _psmove.psmove_save_magnetometer_calibration

def psmove_get_magnetometer_calibration_range(move):
    return _psmove.psmove_get_magnetometer_calibration_range(move)
psmove_get_magnetometer_calibration_range = _psmove.psmove_get_magnetometer_calibration_range

def psmove_has_calibration(move):
    return _psmove.psmove_has_calibration(move)
psmove_has_calibration = _psmove.psmove_has_calibration

def psmove_dump_calibration(move):
    return _psmove.psmove_dump_calibration(move)
psmove_dump_calibration = _psmove.psmove_dump_calibration

def psmove_enable_orientation(move, enabled):
    return _psmove.psmove_enable_orientation(move, enabled)
psmove_enable_orientation = _psmove.psmove_enable_orientation

def psmove_has_orientation(move):
    return _psmove.psmove_has_orientation(move)
psmove_has_orientation = _psmove.psmove_has_orientation

def psmove_get_orientation(move, w, x, y, z):
    return _psmove.psmove_get_orientation(move, w, x, y, z)
psmove_get_orientation = _psmove.psmove_get_orientation

def psmove_reset_orientation(move):
    return _psmove.psmove_reset_orientation(move)
psmove_reset_orientation = _psmove.psmove_reset_orientation

def psmove_set_orientation_fusion_type(move, fusion_type):
    return _psmove.psmove_set_orientation_fusion_type(move, fusion_type)
psmove_set_orientation_fusion_type = _psmove.psmove_set_orientation_fusion_type

def psmove_set_calibration_pose(move, calibration_pose):
    return _psmove.psmove_set_calibration_pose(move, calibration_pose)
psmove_set_calibration_pose = _psmove.psmove_set_calibration_pose

def psmove_set_calibration_transform(move, transform):
    return _psmove.psmove_set_calibration_transform(move, transform)
psmove_set_calibration_transform = _psmove.psmove_set_calibration_transform

def psmove_get_identity_gravity_calibration_direction(move, out_a):
    return _psmove.psmove_get_identity_gravity_calibration_direction(move, out_a)
psmove_get_identity_gravity_calibration_direction = _psmove.psmove_get_identity_gravity_calibration_direction

def psmove_get_transformed_gravity_calibration_direction(move, out_a):
    return _psmove.psmove_get_transformed_gravity_calibration_direction(move, out_a)
psmove_get_transformed_gravity_calibration_direction = _psmove.psmove_get_transformed_gravity_calibration_direction

def psmove_get_identity_magnetometer_calibration_direction(move, out_m):
    return _psmove.psmove_get_identity_magnetometer_calibration_direction(move, out_m)
psmove_get_identity_magnetometer_calibration_direction = _psmove.psmove_get_identity_magnetometer_calibration_direction

def psmove_get_transformed_magnetometer_calibration_direction(move, out_m):
    return _psmove.psmove_get_transformed_magnetometer_calibration_direction(move, out_m)
psmove_get_transformed_magnetometer_calibration_direction = _psmove.psmove_get_transformed_magnetometer_calibration_direction

def psmove_set_magnetometer_calibration_direction(move, m):
    return _psmove.psmove_set_magnetometer_calibration_direction(move, m)
psmove_set_magnetometer_calibration_direction = _psmove.psmove_set_magnetometer_calibration_direction

def psmove_set_sensor_data_basis(move, basis_type):
    return _psmove.psmove_set_sensor_data_basis(move, basis_type)
psmove_set_sensor_data_basis = _psmove.psmove_set_sensor_data_basis

def psmove_set_sensor_data_transform(move, transform):
    return _psmove.psmove_set_sensor_data_transform(move, transform)
psmove_set_sensor_data_transform = _psmove.psmove_set_sensor_data_transform

def psmove_get_transformed_magnetometer_direction(move, out_m):
    return _psmove.psmove_get_transformed_magnetometer_direction(move, out_m)
psmove_get_transformed_magnetometer_direction = _psmove.psmove_get_transformed_magnetometer_direction

def psmove_get_transformed_accelerometer_frame_3axisvector(move, frame, out_a):
    return _psmove.psmove_get_transformed_accelerometer_frame_3axisvector(move, frame, out_a)
psmove_get_transformed_accelerometer_frame_3axisvector = _psmove.psmove_get_transformed_accelerometer_frame_3axisvector

def psmove_get_transformed_accelerometer_frame_direction(move, frame, out_a):
    return _psmove.psmove_get_transformed_accelerometer_frame_direction(move, frame, out_a)
psmove_get_transformed_accelerometer_frame_direction = _psmove.psmove_get_transformed_accelerometer_frame_direction

def psmove_get_transformed_gyroscope_frame_3axisvector(move, frame, out_w):
    return _psmove.psmove_get_transformed_gyroscope_frame_3axisvector(move, frame, out_w)
psmove_get_transformed_gyroscope_frame_3axisvector = _psmove.psmove_get_transformed_gyroscope_frame_3axisvector

def psmove_disconnect(move):
    return _psmove.psmove_disconnect(move)
psmove_disconnect = _psmove.psmove_disconnect

def psmove_reinit():
    return _psmove.psmove_reinit()
psmove_reinit = _psmove.psmove_reinit

def psmove_util_get_ticks():
    return _psmove.psmove_util_get_ticks()
psmove_util_get_ticks = _psmove.psmove_util_get_ticks

def psmove_util_get_data_dir():
    return _psmove.psmove_util_get_data_dir()
psmove_util_get_data_dir = _psmove.psmove_util_get_data_dir

def psmove_util_get_file_path(filename):
    return _psmove.psmove_util_get_file_path(filename)
psmove_util_get_file_path = _psmove.psmove_util_get_file_path

def psmove_util_get_system_file_path(filename):
    return _psmove.psmove_util_get_system_file_path(filename)
psmove_util_get_system_file_path = _psmove.psmove_util_get_system_file_path

def psmove_util_get_env_int(name):
    return _psmove.psmove_util_get_env_int(name)
psmove_util_get_env_int = _psmove.psmove_util_get_env_int

def psmove_util_get_env_string(name):
    return _psmove.psmove_util_get_env_string(name)
psmove_util_get_env_string = _psmove.psmove_util_get_env_string

def psmove_util_sleep_ms(ms):
    return _psmove.psmove_util_sleep_ms(ms)
psmove_util_sleep_ms = _psmove.psmove_util_sleep_ms
class PSMove(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMove, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMove, name)
    __repr__ = _swig_repr
    __swig_getmethods__["connection_type"] = _psmove.PSMove_connection_type_get
    if _newclass:
        connection_type = _swig_property(_psmove.PSMove_connection_type_get)
    __swig_getmethods__["ax"] = _psmove.PSMove_ax_get
    if _newclass:
        ax = _swig_property(_psmove.PSMove_ax_get)
    __swig_getmethods__["ay"] = _psmove.PSMove_ay_get
    if _newclass:
        ay = _swig_property(_psmove.PSMove_ay_get)
    __swig_getmethods__["az"] = _psmove.PSMove_az_get
    if _newclass:
        az = _swig_property(_psmove.PSMove_az_get)
    __swig_getmethods__["gx"] = _psmove.PSMove_gx_get
    if _newclass:
        gx = _swig_property(_psmove.PSMove_gx_get)
    __swig_getmethods__["gy"] = _psmove.PSMove_gy_get
    if _newclass:
        gy = _swig_property(_psmove.PSMove_gy_get)
    __swig_getmethods__["gz"] = _psmove.PSMove_gz_get
    if _newclass:
        gz = _swig_property(_psmove.PSMove_gz_get)
    __swig_getmethods__["mx"] = _psmove.PSMove_mx_get
    if _newclass:
        mx = _swig_property(_psmove.PSMove_mx_get)
    __swig_getmethods__["my"] = _psmove.PSMove_my_get
    if _newclass:
        my = _swig_property(_psmove.PSMove_my_get)
    __swig_getmethods__["mz"] = _psmove.PSMove_mz_get
    if _newclass:
        mz = _swig_property(_psmove.PSMove_mz_get)

    def __init__(self, *args):
        this = _psmove.new_PSMove(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def get_accelerometer_frame(self, frame):
        return _psmove.PSMove_get_accelerometer_frame(self, frame)

    def get_gyroscope_frame(self, frame):
        return _psmove.PSMove_get_gyroscope_frame(self, frame)

    def get_magnetometer_vector(self):
        return _psmove.PSMove_get_magnetometer_vector(self)

    def enable_orientation(self, enabled):
        return _psmove.PSMove_enable_orientation(self, enabled)

    def has_orientation(self):
        return _psmove.PSMove_has_orientation(self)

    def has_calibration(self):
        return _psmove.PSMove_has_calibration(self)

    def get_orientation(self):
        return _psmove.PSMove_get_orientation(self)

    def reset_orientation(self):
        return _psmove.PSMove_reset_orientation(self)

    def set_leds(self, r, g, b):
        return _psmove.PSMove_set_leds(self, r, g, b)

    def set_rumble(self, rumble):
        return _psmove.PSMove_set_rumble(self, rumble)

    def update_leds(self):
        return _psmove.PSMove_update_leds(self)

    def set_rate_limiting(self, enabled):
        return _psmove.PSMove_set_rate_limiting(self, enabled)

    def pair(self):
        return _psmove.PSMove_pair(self)

    def pair_custom(self, btaddr):
        return _psmove.PSMove_pair_custom(self, btaddr)

    def get_serial(self):
        return _psmove.PSMove_get_serial(self)

    def is_remote(self):
        return _psmove.PSMove_is_remote(self)

    def poll(self):
        return _psmove.PSMove_poll(self)

    def get_buttons(self):
        return _psmove.PSMove_get_buttons(self)

    def get_button_events(self):
        return _psmove.PSMove_get_button_events(self)

    def get_battery(self):
        return _psmove.PSMove_get_battery(self)

    def get_temperature(self):
        return _psmove.PSMove_get_temperature(self)

    def get_temperature_in_celsius(self):
        return _psmove.PSMove_get_temperature_in_celsius(self)

    def get_trigger(self):
        return _psmove.PSMove_get_trigger(self)
    __swig_destroy__ = _psmove.delete_PSMove
    __del__ = lambda self: None
PSMove_swigregister = _psmove.PSMove_swigregister
PSMove_swigregister(PSMove)


_psmove.PSMOVE_TRACKER_DEFAULT_WIDTH_swigconstant(_psmove)
PSMOVE_TRACKER_DEFAULT_WIDTH = _psmove.PSMOVE_TRACKER_DEFAULT_WIDTH

_psmove.PSMOVE_TRACKER_DEFAULT_HEIGHT_swigconstant(_psmove)
PSMOVE_TRACKER_DEFAULT_HEIGHT = _psmove.PSMOVE_TRACKER_DEFAULT_HEIGHT

_psmove.PSMOVE_TRACKER_DEFAULT_FPS_swigconstant(_psmove)
PSMOVE_TRACKER_DEFAULT_FPS = _psmove.PSMOVE_TRACKER_DEFAULT_FPS

_psmove.PSMOVE_TRACKER_MAX_CONTROLLERS_swigconstant(_psmove)
PSMOVE_TRACKER_MAX_CONTROLLERS = _psmove.PSMOVE_TRACKER_MAX_CONTROLLERS

_psmove.PSMOVE_TRACKER_CAMERA_ENV_swigconstant(_psmove)
PSMOVE_TRACKER_CAMERA_ENV = _psmove.PSMOVE_TRACKER_CAMERA_ENV

_psmove.PSMOVE_TRACKER_FILENAME_ENV_swigconstant(_psmove)
PSMOVE_TRACKER_FILENAME_ENV = _psmove.PSMOVE_TRACKER_FILENAME_ENV

_psmove.PSMOVE_TRACKER_ROI_SIZE_ENV_swigconstant(_psmove)
PSMOVE_TRACKER_ROI_SIZE_ENV = _psmove.PSMOVE_TRACKER_ROI_SIZE_ENV

_psmove.PSMOVE_TRACKER_COLOR_ENV_swigconstant(_psmove)
PSMOVE_TRACKER_COLOR_ENV = _psmove.PSMOVE_TRACKER_COLOR_ENV

_psmove.PSMOVE_TRACKER_WIDTH_ENV_swigconstant(_psmove)
PSMOVE_TRACKER_WIDTH_ENV = _psmove.PSMOVE_TRACKER_WIDTH_ENV

_psmove.PSMOVE_TRACKER_HEIGHT_ENV_swigconstant(_psmove)
PSMOVE_TRACKER_HEIGHT_ENV = _psmove.PSMOVE_TRACKER_HEIGHT_ENV
class PSMoveTrackerRGBImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMoveTrackerRGBImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMoveTrackerRGBImage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _psmove.PSMoveTrackerRGBImage_data_set
    __swig_getmethods__["data"] = _psmove.PSMoveTrackerRGBImage_data_get
    if _newclass:
        data = _swig_property(_psmove.PSMoveTrackerRGBImage_data_get, _psmove.PSMoveTrackerRGBImage_data_set)
    __swig_setmethods__["width"] = _psmove.PSMoveTrackerRGBImage_width_set
    __swig_getmethods__["width"] = _psmove.PSMoveTrackerRGBImage_width_get
    if _newclass:
        width = _swig_property(_psmove.PSMoveTrackerRGBImage_width_get, _psmove.PSMoveTrackerRGBImage_width_set)
    __swig_setmethods__["height"] = _psmove.PSMoveTrackerRGBImage_height_set
    __swig_getmethods__["height"] = _psmove.PSMoveTrackerRGBImage_height_get
    if _newclass:
        height = _swig_property(_psmove.PSMoveTrackerRGBImage_height_get, _psmove.PSMoveTrackerRGBImage_height_set)
    __swig_getmethods__["size"] = _psmove.PSMoveTrackerRGBImage_size_get
    if _newclass:
        size = _swig_property(_psmove.PSMoveTrackerRGBImage_size_get)

    def __init__(self):
        this = _psmove.new_PSMoveTrackerRGBImage()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _psmove.delete_PSMoveTrackerRGBImage
    __del__ = lambda self: None
PSMoveTrackerRGBImage_swigregister = _psmove.PSMoveTrackerRGBImage_swigregister
PSMoveTrackerRGBImage_swigregister(PSMoveTrackerRGBImage)


_psmove.Tracker_NOT_CALIBRATED_swigconstant(_psmove)
Tracker_NOT_CALIBRATED = _psmove.Tracker_NOT_CALIBRATED

_psmove.Tracker_CALIBRATION_ERROR_swigconstant(_psmove)
Tracker_CALIBRATION_ERROR = _psmove.Tracker_CALIBRATION_ERROR

_psmove.Tracker_CALIBRATED_swigconstant(_psmove)
Tracker_CALIBRATED = _psmove.Tracker_CALIBRATED

_psmove.Tracker_TRACKING_swigconstant(_psmove)
Tracker_TRACKING = _psmove.Tracker_TRACKING

_psmove.Exposure_LOW_swigconstant(_psmove)
Exposure_LOW = _psmove.Exposure_LOW

_psmove.Exposure_MEDIUM_swigconstant(_psmove)
Exposure_MEDIUM = _psmove.Exposure_MEDIUM

_psmove.Exposure_HIGH_swigconstant(_psmove)
Exposure_HIGH = _psmove.Exposure_HIGH

_psmove.Exposure_INVALID_swigconstant(_psmove)
Exposure_INVALID = _psmove.Exposure_INVALID
class PSMoveTrackerSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMoveTrackerSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMoveTrackerSettings, name)
    __repr__ = _swig_repr
    __swig_setmethods__["camera_frame_width"] = _psmove.PSMoveTrackerSettings_camera_frame_width_set
    __swig_getmethods__["camera_frame_width"] = _psmove.PSMoveTrackerSettings_camera_frame_width_get
    if _newclass:
        camera_frame_width = _swig_property(_psmove.PSMoveTrackerSettings_camera_frame_width_get, _psmove.PSMoveTrackerSettings_camera_frame_width_set)
    __swig_setmethods__["camera_frame_height"] = _psmove.PSMoveTrackerSettings_camera_frame_height_set
    __swig_getmethods__["camera_frame_height"] = _psmove.PSMoveTrackerSettings_camera_frame_height_get
    if _newclass:
        camera_frame_height = _swig_property(_psmove.PSMoveTrackerSettings_camera_frame_height_get, _psmove.PSMoveTrackerSettings_camera_frame_height_set)
    __swig_setmethods__["camera_frame_rate"] = _psmove.PSMoveTrackerSettings_camera_frame_rate_set
    __swig_getmethods__["camera_frame_rate"] = _psmove.PSMoveTrackerSettings_camera_frame_rate_get
    if _newclass:
        camera_frame_rate = _swig_property(_psmove.PSMoveTrackerSettings_camera_frame_rate_get, _psmove.PSMoveTrackerSettings_camera_frame_rate_set)
    __swig_setmethods__["camera_auto_gain"] = _psmove.PSMoveTrackerSettings_camera_auto_gain_set
    __swig_getmethods__["camera_auto_gain"] = _psmove.PSMoveTrackerSettings_camera_auto_gain_get
    if _newclass:
        camera_auto_gain = _swig_property(_psmove.PSMoveTrackerSettings_camera_auto_gain_get, _psmove.PSMoveTrackerSettings_camera_auto_gain_set)
    __swig_setmethods__["camera_gain"] = _psmove.PSMoveTrackerSettings_camera_gain_set
    __swig_getmethods__["camera_gain"] = _psmove.PSMoveTrackerSettings_camera_gain_get
    if _newclass:
        camera_gain = _swig_property(_psmove.PSMoveTrackerSettings_camera_gain_get, _psmove.PSMoveTrackerSettings_camera_gain_set)
    __swig_setmethods__["camera_auto_white_balance"] = _psmove.PSMoveTrackerSettings_camera_auto_white_balance_set
    __swig_getmethods__["camera_auto_white_balance"] = _psmove.PSMoveTrackerSettings_camera_auto_white_balance_get
    if _newclass:
        camera_auto_white_balance = _swig_property(_psmove.PSMoveTrackerSettings_camera_auto_white_balance_get, _psmove.PSMoveTrackerSettings_camera_auto_white_balance_set)
    __swig_setmethods__["camera_exposure"] = _psmove.PSMoveTrackerSettings_camera_exposure_set
    __swig_getmethods__["camera_exposure"] = _psmove.PSMoveTrackerSettings_camera_exposure_get
    if _newclass:
        camera_exposure = _swig_property(_psmove.PSMoveTrackerSettings_camera_exposure_get, _psmove.PSMoveTrackerSettings_camera_exposure_set)
    __swig_setmethods__["camera_brightness"] = _psmove.PSMoveTrackerSettings_camera_brightness_set
    __swig_getmethods__["camera_brightness"] = _psmove.PSMoveTrackerSettings_camera_brightness_get
    if _newclass:
        camera_brightness = _swig_property(_psmove.PSMoveTrackerSettings_camera_brightness_get, _psmove.PSMoveTrackerSettings_camera_brightness_set)
    __swig_setmethods__["camera_mirror"] = _psmove.PSMoveTrackerSettings_camera_mirror_set
    __swig_getmethods__["camera_mirror"] = _psmove.PSMoveTrackerSettings_camera_mirror_get
    if _newclass:
        camera_mirror = _swig_property(_psmove.PSMoveTrackerSettings_camera_mirror_get, _psmove.PSMoveTrackerSettings_camera_mirror_set)
    __swig_setmethods__["exposure_mode"] = _psmove.PSMoveTrackerSettings_exposure_mode_set
    __swig_getmethods__["exposure_mode"] = _psmove.PSMoveTrackerSettings_exposure_mode_get
    if _newclass:
        exposure_mode = _swig_property(_psmove.PSMoveTrackerSettings_exposure_mode_get, _psmove.PSMoveTrackerSettings_exposure_mode_set)
    __swig_setmethods__["calibration_blink_delay"] = _psmove.PSMoveTrackerSettings_calibration_blink_delay_set
    __swig_getmethods__["calibration_blink_delay"] = _psmove.PSMoveTrackerSettings_calibration_blink_delay_get
    if _newclass:
        calibration_blink_delay = _swig_property(_psmove.PSMoveTrackerSettings_calibration_blink_delay_get, _psmove.PSMoveTrackerSettings_calibration_blink_delay_set)
    __swig_setmethods__["calibration_diff_t"] = _psmove.PSMoveTrackerSettings_calibration_diff_t_set
    __swig_getmethods__["calibration_diff_t"] = _psmove.PSMoveTrackerSettings_calibration_diff_t_get
    if _newclass:
        calibration_diff_t = _swig_property(_psmove.PSMoveTrackerSettings_calibration_diff_t_get, _psmove.PSMoveTrackerSettings_calibration_diff_t_set)
    __swig_setmethods__["calibration_min_size"] = _psmove.PSMoveTrackerSettings_calibration_min_size_set
    __swig_getmethods__["calibration_min_size"] = _psmove.PSMoveTrackerSettings_calibration_min_size_get
    if _newclass:
        calibration_min_size = _swig_property(_psmove.PSMoveTrackerSettings_calibration_min_size_get, _psmove.PSMoveTrackerSettings_calibration_min_size_set)
    __swig_setmethods__["calibration_max_distance"] = _psmove.PSMoveTrackerSettings_calibration_max_distance_set
    __swig_getmethods__["calibration_max_distance"] = _psmove.PSMoveTrackerSettings_calibration_max_distance_get
    if _newclass:
        calibration_max_distance = _swig_property(_psmove.PSMoveTrackerSettings_calibration_max_distance_get, _psmove.PSMoveTrackerSettings_calibration_max_distance_set)
    __swig_setmethods__["calibration_size_std"] = _psmove.PSMoveTrackerSettings_calibration_size_std_set
    __swig_getmethods__["calibration_size_std"] = _psmove.PSMoveTrackerSettings_calibration_size_std_get
    if _newclass:
        calibration_size_std = _swig_property(_psmove.PSMoveTrackerSettings_calibration_size_std_get, _psmove.PSMoveTrackerSettings_calibration_size_std_set)
    __swig_setmethods__["color_mapping_max_age"] = _psmove.PSMoveTrackerSettings_color_mapping_max_age_set
    __swig_getmethods__["color_mapping_max_age"] = _psmove.PSMoveTrackerSettings_color_mapping_max_age_get
    if _newclass:
        color_mapping_max_age = _swig_property(_psmove.PSMoveTrackerSettings_color_mapping_max_age_get, _psmove.PSMoveTrackerSettings_color_mapping_max_age_set)
    __swig_setmethods__["dimming_factor"] = _psmove.PSMoveTrackerSettings_dimming_factor_set
    __swig_getmethods__["dimming_factor"] = _psmove.PSMoveTrackerSettings_dimming_factor_get
    if _newclass:
        dimming_factor = _swig_property(_psmove.PSMoveTrackerSettings_dimming_factor_get, _psmove.PSMoveTrackerSettings_dimming_factor_set)
    __swig_setmethods__["color_hue_filter_range"] = _psmove.PSMoveTrackerSettings_color_hue_filter_range_set
    __swig_getmethods__["color_hue_filter_range"] = _psmove.PSMoveTrackerSettings_color_hue_filter_range_get
    if _newclass:
        color_hue_filter_range = _swig_property(_psmove.PSMoveTrackerSettings_color_hue_filter_range_get, _psmove.PSMoveTrackerSettings_color_hue_filter_range_set)
    __swig_setmethods__["color_saturation_filter_range"] = _psmove.PSMoveTrackerSettings_color_saturation_filter_range_set
    __swig_getmethods__["color_saturation_filter_range"] = _psmove.PSMoveTrackerSettings_color_saturation_filter_range_get
    if _newclass:
        color_saturation_filter_range = _swig_property(_psmove.PSMoveTrackerSettings_color_saturation_filter_range_get, _psmove.PSMoveTrackerSettings_color_saturation_filter_range_set)
    __swig_setmethods__["color_value_filter_range"] = _psmove.PSMoveTrackerSettings_color_value_filter_range_set
    __swig_getmethods__["color_value_filter_range"] = _psmove.PSMoveTrackerSettings_color_value_filter_range_get
    if _newclass:
        color_value_filter_range = _swig_property(_psmove.PSMoveTrackerSettings_color_value_filter_range_get, _psmove.PSMoveTrackerSettings_color_value_filter_range_set)
    __swig_setmethods__["tracker_adaptive_xy"] = _psmove.PSMoveTrackerSettings_tracker_adaptive_xy_set
    __swig_getmethods__["tracker_adaptive_xy"] = _psmove.PSMoveTrackerSettings_tracker_adaptive_xy_get
    if _newclass:
        tracker_adaptive_xy = _swig_property(_psmove.PSMoveTrackerSettings_tracker_adaptive_xy_get, _psmove.PSMoveTrackerSettings_tracker_adaptive_xy_set)
    __swig_setmethods__["tracker_adaptive_z"] = _psmove.PSMoveTrackerSettings_tracker_adaptive_z_set
    __swig_getmethods__["tracker_adaptive_z"] = _psmove.PSMoveTrackerSettings_tracker_adaptive_z_get
    if _newclass:
        tracker_adaptive_z = _swig_property(_psmove.PSMoveTrackerSettings_tracker_adaptive_z_get, _psmove.PSMoveTrackerSettings_tracker_adaptive_z_set)
    __swig_setmethods__["color_adaption_quality_t"] = _psmove.PSMoveTrackerSettings_color_adaption_quality_t_set
    __swig_getmethods__["color_adaption_quality_t"] = _psmove.PSMoveTrackerSettings_color_adaption_quality_t_get
    if _newclass:
        color_adaption_quality_t = _swig_property(_psmove.PSMoveTrackerSettings_color_adaption_quality_t_get, _psmove.PSMoveTrackerSettings_color_adaption_quality_t_set)
    __swig_setmethods__["color_update_rate"] = _psmove.PSMoveTrackerSettings_color_update_rate_set
    __swig_getmethods__["color_update_rate"] = _psmove.PSMoveTrackerSettings_color_update_rate_get
    if _newclass:
        color_update_rate = _swig_property(_psmove.PSMoveTrackerSettings_color_update_rate_get, _psmove.PSMoveTrackerSettings_color_update_rate_set)
    __swig_setmethods__["search_tile_width"] = _psmove.PSMoveTrackerSettings_search_tile_width_set
    __swig_getmethods__["search_tile_width"] = _psmove.PSMoveTrackerSettings_search_tile_width_get
    if _newclass:
        search_tile_width = _swig_property(_psmove.PSMoveTrackerSettings_search_tile_width_get, _psmove.PSMoveTrackerSettings_search_tile_width_set)
    __swig_setmethods__["search_tile_height"] = _psmove.PSMoveTrackerSettings_search_tile_height_set
    __swig_getmethods__["search_tile_height"] = _psmove.PSMoveTrackerSettings_search_tile_height_get
    if _newclass:
        search_tile_height = _swig_property(_psmove.PSMoveTrackerSettings_search_tile_height_get, _psmove.PSMoveTrackerSettings_search_tile_height_set)
    __swig_setmethods__["search_tiles_horizontal"] = _psmove.PSMoveTrackerSettings_search_tiles_horizontal_set
    __swig_getmethods__["search_tiles_horizontal"] = _psmove.PSMoveTrackerSettings_search_tiles_horizontal_get
    if _newclass:
        search_tiles_horizontal = _swig_property(_psmove.PSMoveTrackerSettings_search_tiles_horizontal_get, _psmove.PSMoveTrackerSettings_search_tiles_horizontal_set)
    __swig_setmethods__["search_tiles_count"] = _psmove.PSMoveTrackerSettings_search_tiles_count_set
    __swig_getmethods__["search_tiles_count"] = _psmove.PSMoveTrackerSettings_search_tiles_count_get
    if _newclass:
        search_tiles_count = _swig_property(_psmove.PSMoveTrackerSettings_search_tiles_count_get, _psmove.PSMoveTrackerSettings_search_tiles_count_set)
    __swig_setmethods__["roi_adjust_fps_t"] = _psmove.PSMoveTrackerSettings_roi_adjust_fps_t_set
    __swig_getmethods__["roi_adjust_fps_t"] = _psmove.PSMoveTrackerSettings_roi_adjust_fps_t_get
    if _newclass:
        roi_adjust_fps_t = _swig_property(_psmove.PSMoveTrackerSettings_roi_adjust_fps_t_get, _psmove.PSMoveTrackerSettings_roi_adjust_fps_t_set)
    __swig_setmethods__["tracker_quality_t1"] = _psmove.PSMoveTrackerSettings_tracker_quality_t1_set
    __swig_getmethods__["tracker_quality_t1"] = _psmove.PSMoveTrackerSettings_tracker_quality_t1_get
    if _newclass:
        tracker_quality_t1 = _swig_property(_psmove.PSMoveTrackerSettings_tracker_quality_t1_get, _psmove.PSMoveTrackerSettings_tracker_quality_t1_set)
    __swig_setmethods__["tracker_quality_t2"] = _psmove.PSMoveTrackerSettings_tracker_quality_t2_set
    __swig_getmethods__["tracker_quality_t2"] = _psmove.PSMoveTrackerSettings_tracker_quality_t2_get
    if _newclass:
        tracker_quality_t2 = _swig_property(_psmove.PSMoveTrackerSettings_tracker_quality_t2_get, _psmove.PSMoveTrackerSettings_tracker_quality_t2_set)
    __swig_setmethods__["tracker_quality_t3"] = _psmove.PSMoveTrackerSettings_tracker_quality_t3_set
    __swig_getmethods__["tracker_quality_t3"] = _psmove.PSMoveTrackerSettings_tracker_quality_t3_get
    if _newclass:
        tracker_quality_t3 = _swig_property(_psmove.PSMoveTrackerSettings_tracker_quality_t3_get, _psmove.PSMoveTrackerSettings_tracker_quality_t3_set)
    __swig_setmethods__["color_update_quality_t1"] = _psmove.PSMoveTrackerSettings_color_update_quality_t1_set
    __swig_getmethods__["color_update_quality_t1"] = _psmove.PSMoveTrackerSettings_color_update_quality_t1_get
    if _newclass:
        color_update_quality_t1 = _swig_property(_psmove.PSMoveTrackerSettings_color_update_quality_t1_get, _psmove.PSMoveTrackerSettings_color_update_quality_t1_set)
    __swig_setmethods__["color_update_quality_t2"] = _psmove.PSMoveTrackerSettings_color_update_quality_t2_set
    __swig_getmethods__["color_update_quality_t2"] = _psmove.PSMoveTrackerSettings_color_update_quality_t2_get
    if _newclass:
        color_update_quality_t2 = _swig_property(_psmove.PSMoveTrackerSettings_color_update_quality_t2_get, _psmove.PSMoveTrackerSettings_color_update_quality_t2_set)
    __swig_setmethods__["color_update_quality_t3"] = _psmove.PSMoveTrackerSettings_color_update_quality_t3_set
    __swig_getmethods__["color_update_quality_t3"] = _psmove.PSMoveTrackerSettings_color_update_quality_t3_get
    if _newclass:
        color_update_quality_t3 = _swig_property(_psmove.PSMoveTrackerSettings_color_update_quality_t3_get, _psmove.PSMoveTrackerSettings_color_update_quality_t3_set)
    __swig_setmethods__["intrinsics_xml"] = _psmove.PSMoveTrackerSettings_intrinsics_xml_set
    __swig_getmethods__["intrinsics_xml"] = _psmove.PSMoveTrackerSettings_intrinsics_xml_get
    if _newclass:
        intrinsics_xml = _swig_property(_psmove.PSMoveTrackerSettings_intrinsics_xml_get, _psmove.PSMoveTrackerSettings_intrinsics_xml_set)
    __swig_setmethods__["distortion_xml"] = _psmove.PSMoveTrackerSettings_distortion_xml_set
    __swig_getmethods__["distortion_xml"] = _psmove.PSMoveTrackerSettings_distortion_xml_get
    if _newclass:
        distortion_xml = _swig_property(_psmove.PSMoveTrackerSettings_distortion_xml_get, _psmove.PSMoveTrackerSettings_distortion_xml_set)

    def __init__(self):
        this = _psmove.new_PSMoveTrackerSettings()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _psmove.delete_PSMoveTrackerSettings
    __del__ = lambda self: None
PSMoveTrackerSettings_swigregister = _psmove.PSMoveTrackerSettings_swigregister
PSMoveTrackerSettings_swigregister(PSMoveTrackerSettings)


def psmove_tracker_settings_set_default(settings):
    return _psmove.psmove_tracker_settings_set_default(settings)
psmove_tracker_settings_set_default = _psmove.psmove_tracker_settings_set_default

def psmove_tracker_new():
    return _psmove.psmove_tracker_new()
psmove_tracker_new = _psmove.psmove_tracker_new

def psmove_tracker_new_with_settings(settings):
    return _psmove.psmove_tracker_new_with_settings(settings)
psmove_tracker_new_with_settings = _psmove.psmove_tracker_new_with_settings

def psmove_tracker_new_with_camera(camera):
    return _psmove.psmove_tracker_new_with_camera(camera)
psmove_tracker_new_with_camera = _psmove.psmove_tracker_new_with_camera

def psmove_tracker_new_with_camera_and_settings(camera, settings):
    return _psmove.psmove_tracker_new_with_camera_and_settings(camera, settings)
psmove_tracker_new_with_camera_and_settings = _psmove.psmove_tracker_new_with_camera_and_settings

def psmove_tracker_count_connected():
    return _psmove.psmove_tracker_count_connected()
psmove_tracker_count_connected = _psmove.psmove_tracker_count_connected

def psmove_tracker_set_auto_update_leds(tracker, move, auto_update_leds):
    return _psmove.psmove_tracker_set_auto_update_leds(tracker, move, auto_update_leds)
psmove_tracker_set_auto_update_leds = _psmove.psmove_tracker_set_auto_update_leds

def psmove_tracker_get_auto_update_leds(tracker, move):
    return _psmove.psmove_tracker_get_auto_update_leds(tracker, move)
psmove_tracker_get_auto_update_leds = _psmove.psmove_tracker_get_auto_update_leds

def psmove_tracker_set_dimming(tracker, dimming):
    return _psmove.psmove_tracker_set_dimming(tracker, dimming)
psmove_tracker_set_dimming = _psmove.psmove_tracker_set_dimming

def psmove_tracker_get_dimming(tracker):
    return _psmove.psmove_tracker_get_dimming(tracker)
psmove_tracker_get_dimming = _psmove.psmove_tracker_get_dimming

def psmove_tracker_set_exposure(tracker, exposure):
    return _psmove.psmove_tracker_set_exposure(tracker, exposure)
psmove_tracker_set_exposure = _psmove.psmove_tracker_set_exposure

def psmove_tracker_get_exposure(tracker):
    return _psmove.psmove_tracker_get_exposure(tracker)
psmove_tracker_get_exposure = _psmove.psmove_tracker_get_exposure

def psmove_tracker_enable_deinterlace(tracker, enabled):
    return _psmove.psmove_tracker_enable_deinterlace(tracker, enabled)
psmove_tracker_enable_deinterlace = _psmove.psmove_tracker_enable_deinterlace

def psmove_tracker_set_mirror(tracker, enabled):
    return _psmove.psmove_tracker_set_mirror(tracker, enabled)
psmove_tracker_set_mirror = _psmove.psmove_tracker_set_mirror

def psmove_tracker_get_mirror(tracker):
    return _psmove.psmove_tracker_get_mirror(tracker)
psmove_tracker_get_mirror = _psmove.psmove_tracker_get_mirror

def psmove_tracker_enable(tracker, move):
    return _psmove.psmove_tracker_enable(tracker, move)
psmove_tracker_enable = _psmove.psmove_tracker_enable

def psmove_tracker_enable_with_color(tracker, move, r, g, b):
    return _psmove.psmove_tracker_enable_with_color(tracker, move, r, g, b)
psmove_tracker_enable_with_color = _psmove.psmove_tracker_enable_with_color

def psmove_tracker_disable(tracker, move):
    return _psmove.psmove_tracker_disable(tracker, move)
psmove_tracker_disable = _psmove.psmove_tracker_disable

def psmove_tracker_get_color(tracker, move, r, g, b):
    return _psmove.psmove_tracker_get_color(tracker, move, r, g, b)
psmove_tracker_get_color = _psmove.psmove_tracker_get_color

def psmove_tracker_get_camera_color(tracker, move, r, g, b):
    return _psmove.psmove_tracker_get_camera_color(tracker, move, r, g, b)
psmove_tracker_get_camera_color = _psmove.psmove_tracker_get_camera_color

def psmove_tracker_set_camera_color(tracker, move, r, g, b):
    return _psmove.psmove_tracker_set_camera_color(tracker, move, r, g, b)
psmove_tracker_set_camera_color = _psmove.psmove_tracker_set_camera_color

def psmove_tracker_get_status(tracker, move):
    return _psmove.psmove_tracker_get_status(tracker, move)
psmove_tracker_get_status = _psmove.psmove_tracker_get_status

def psmove_tracker_update_image(tracker):
    return _psmove.psmove_tracker_update_image(tracker)
psmove_tracker_update_image = _psmove.psmove_tracker_update_image

def psmove_tracker_update(tracker, move):
    return _psmove.psmove_tracker_update(tracker, move)
psmove_tracker_update = _psmove.psmove_tracker_update

def psmove_tracker_annotate(tracker):
    return _psmove.psmove_tracker_annotate(tracker)
psmove_tracker_annotate = _psmove.psmove_tracker_annotate

def psmove_tracker_get_frame(tracker):
    return _psmove.psmove_tracker_get_frame(tracker)
psmove_tracker_get_frame = _psmove.psmove_tracker_get_frame

def psmove_tracker_get_image(tracker):
    return _psmove.psmove_tracker_get_image(tracker)
psmove_tracker_get_image = _psmove.psmove_tracker_get_image

def psmove_tracker_get_position(tracker, move, x, y, radius):
    return _psmove.psmove_tracker_get_position(tracker, move, x, y, radius)
psmove_tracker_get_position = _psmove.psmove_tracker_get_position

def psmove_tracker_get_size(tracker, width, height):
    return _psmove.psmove_tracker_get_size(tracker, width, height)
psmove_tracker_get_size = _psmove.psmove_tracker_get_size

def psmove_tracker_distance_from_radius(tracker, radius):
    return _psmove.psmove_tracker_distance_from_radius(tracker, radius)
psmove_tracker_distance_from_radius = _psmove.psmove_tracker_distance_from_radius

def psmove_tracker_set_distance_parameters(tracker, height, center, hwhm, shape):
    return _psmove.psmove_tracker_set_distance_parameters(tracker, height, center, hwhm, shape)
psmove_tracker_set_distance_parameters = _psmove.psmove_tracker_set_distance_parameters

def psmove_tracker_free(tracker):
    return _psmove.psmove_tracker_free(tracker)
psmove_tracker_free = _psmove.psmove_tracker_free

_psmove.PSEYE_FOV_BLUE_DOT_swigconstant(_psmove)
PSEYE_FOV_BLUE_DOT = _psmove.PSEYE_FOV_BLUE_DOT

_psmove.PSEYE_FOV_RED_DOT_swigconstant(_psmove)
PSEYE_FOV_RED_DOT = _psmove.PSEYE_FOV_RED_DOT
class PSMoveMatrix4x4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMoveMatrix4x4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMoveMatrix4x4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m"] = _psmove.PSMoveMatrix4x4_m_set
    __swig_getmethods__["m"] = _psmove.PSMoveMatrix4x4_m_get
    if _newclass:
        m = _swig_property(_psmove.PSMoveMatrix4x4_m_get, _psmove.PSMoveMatrix4x4_m_set)

    def at(self, i):
        return _psmove.PSMoveMatrix4x4_at(self, i)

    def __init__(self):
        this = _psmove.new_PSMoveMatrix4x4()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _psmove.delete_PSMoveMatrix4x4
    __del__ = lambda self: None
PSMoveMatrix4x4_swigregister = _psmove.PSMoveMatrix4x4_swigregister
PSMoveMatrix4x4_swigregister(PSMoveMatrix4x4)


def psmove_fusion_new(tracker, z_near, z_far):
    return _psmove.psmove_fusion_new(tracker, z_near, z_far)
psmove_fusion_new = _psmove.psmove_fusion_new

def psmove_fusion_get_projection_matrix(fusion):
    return _psmove.psmove_fusion_get_projection_matrix(fusion)
psmove_fusion_get_projection_matrix = _psmove.psmove_fusion_get_projection_matrix

def psmove_fusion_get_modelview_matrix(fusion, move):
    return _psmove.psmove_fusion_get_modelview_matrix(fusion, move)
psmove_fusion_get_modelview_matrix = _psmove.psmove_fusion_get_modelview_matrix

def psmove_fusion_get_position(fusion, move, x, y, z):
    return _psmove.psmove_fusion_get_position(fusion, move, x, y, z)
psmove_fusion_get_position = _psmove.psmove_fusion_get_position

def psmove_fusion_free(fusion):
    return _psmove.psmove_fusion_free(fusion)
psmove_fusion_free = _psmove.psmove_fusion_free
class PSMoveTracker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMoveTracker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMoveTracker, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dimming"] = _psmove.PSMoveTracker_dimming_set
    __swig_getmethods__["dimming"] = _psmove.PSMoveTracker_dimming_get
    if _newclass:
        dimming = _swig_property(_psmove.PSMoveTracker_dimming_get, _psmove.PSMoveTracker_dimming_set)
    __swig_setmethods__["exposure"] = _psmove.PSMoveTracker_exposure_set
    __swig_getmethods__["exposure"] = _psmove.PSMoveTracker_exposure_get
    if _newclass:
        exposure = _swig_property(_psmove.PSMoveTracker_exposure_get, _psmove.PSMoveTracker_exposure_set)

    def __init__(self, *args):
        this = _psmove.new_PSMoveTracker(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def enable(self, move):
        return _psmove.PSMoveTracker_enable(self, move)

    def enable_with_color(self, move, r, g, b):
        return _psmove.PSMoveTracker_enable_with_color(self, move, r, g, b)

    def annotate(self):
        return _psmove.PSMoveTracker_annotate(self)

    def disable(self, move):
        return _psmove.PSMoveTracker_disable(self, move)

    def set_auto_update_leds(self, move, auto_update_leds):
        return _psmove.PSMoveTracker_set_auto_update_leds(self, move, auto_update_leds)

    def get_auto_update_leds(self, move):
        return _psmove.PSMoveTracker_get_auto_update_leds(self, move)

    def get_color(self, move):
        return _psmove.PSMoveTracker_get_color(self, move)

    def get_camera_color(self, move):
        return _psmove.PSMoveTracker_get_camera_color(self, move)

    def set_camera_color(self, move, r, g, b):
        return _psmove.PSMoveTracker_set_camera_color(self, move, r, g, b)

    def enable_deinterlace(self, enabled):
        return _psmove.PSMoveTracker_enable_deinterlace(self, enabled)

    def set_mirror(self, enabled):
        return _psmove.PSMoveTracker_set_mirror(self, enabled)

    def get_mirror(self):
        return _psmove.PSMoveTracker_get_mirror(self)

    def get_status(self, move):
        return _psmove.PSMoveTracker_get_status(self, move)

    def update_image(self):
        return _psmove.PSMoveTracker_update_image(self)

    def update(self, *args):
        return _psmove.PSMoveTracker_update(self, *args)

    def get_image(self):
        return _psmove.PSMoveTracker_get_image(self)

    def get_position(self, move):
        return _psmove.PSMoveTracker_get_position(self, move)

    def get_size(self):
        return _psmove.PSMoveTracker_get_size(self)

    def distance_from_radius(self, radius):
        return _psmove.PSMoveTracker_distance_from_radius(self, radius)

    def set_distance_parameters(self, height, center, hwhm, shape):
        return _psmove.PSMoveTracker_set_distance_parameters(self, height, center, hwhm, shape)
    __swig_destroy__ = _psmove.delete_PSMoveTracker
    __del__ = lambda self: None
PSMoveTracker_swigregister = _psmove.PSMoveTracker_swigregister
PSMoveTracker_swigregister(PSMoveTracker)

class PSMoveFusion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMoveFusion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMoveFusion, name)
    __repr__ = _swig_repr

    def __init__(self, tracker, z_near, z_far):
        this = _psmove.new_PSMoveFusion(tracker, z_near, z_far)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _psmove.delete_PSMoveFusion
    __del__ = lambda self: None

    def get_position(self, move):
        return _psmove.PSMoveFusion_get_position(self, move)

    def get_projection_matrix(self):
        return _psmove.PSMoveFusion_get_projection_matrix(self)

    def get_modelview_matrix(self, move):
        return _psmove.PSMoveFusion_get_modelview_matrix(self, move)
PSMoveFusion_swigregister = _psmove.PSMoveFusion_swigregister
PSMoveFusion_swigregister(PSMoveFusion)


def init(version):
    return _psmove.init(version)
init = _psmove.init

def set_remote_config(config):
    return _psmove.set_remote_config(config)
set_remote_config = _psmove.set_remote_config

def count_connected():
    return _psmove.count_connected()
count_connected = _psmove.count_connected

def reinit():
    return _psmove.reinit()
reinit = _psmove.reinit
# This file is compatible with both classic and new-style classes.


